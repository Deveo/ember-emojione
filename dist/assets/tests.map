{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/smoke-test.js","dummy/tests/acceptance/smoke-test.lint-test.js","dummy/tests/app.lint-test.js","dummy/tests/controllers/application.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.lint-test.js","dummy/tests/helpers/ember-keyboard/register-test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.lint-test.js","dummy/tests/helpers/page-object/component.js","dummy/tests/helpers/page-object/component.lint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.lint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.lint-test.js","dummy/tests/integration/components/emoji-picker-test.js","dummy/tests/integration/components/emoji-picker-test.lint-test.js","dummy/tests/integration/components/emoji-picker-wrapper-test.js","dummy/tests/integration/components/emoji-picker-wrapper-test.lint-test.js","dummy/tests/page-object.js","dummy/tests/pages/components/emoji-picker-wrapper.js","dummy/tests/pages/components/emoji-picker-wrapper.lint-test.js","dummy/tests/pages/components/emoji-picker.js","dummy/tests/pages/components/emoji-picker.lint-test.js","dummy/tests/pages/components/emoji-typing-assistance.js","dummy/tests/pages/components/emoji-typing-assistance.lint-test.js","dummy/tests/resolver.lint-test.js","dummy/tests/router.lint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.lint-test.js","dummy/tests/unit/helpers/inject-emoji-test.js","dummy/tests/unit/helpers/inject-emoji-test.lint-test.js","dummy/tests/unit/services/emoji-test.js","dummy/tests/unit/services/emoji-test.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/smoke-test', ['exports', 'qunit', 'dummy/tests/helpers/module-for-acceptance', 'emojione'], function (exports, _qunit, _dummyTestsHelpersModuleForAcceptance, _emojione) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | smoke test');\n\n  var m = undefined;\n\n  (0, _qunit.test)('visiting /', function callee$0$0(assert) {\n    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          context$1$0.next = 2;\n          return regeneratorRuntime.awrap(visit('/'));\n\n        case 2:\n\n          m = \"`emojione` should be available in the global namespace\";\n          assert.ok(window.emojione, m);\n\n          m = \"`emojione` should be available as a ES import\";\n          assert.ok(_emojione['default'], m);\n\n        case 6:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  });\n});","define('dummy/tests/acceptance/smoke-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/smoke-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/smoke-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/controllers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember-runloop'], function (exports, _emberRunloop) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    (0, _emberRunloop['default'])(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _ember, _emberKeyboard, _emberKeyboardFixturesModifiersArray, _emberKeyboardUtilsGetCmdKey) {\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_emberKeyboardFixturesModifiersArray['default'].indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _emberKeyboardUtilsGetCmdKey['default'])() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/page-object/component', ['exports', 'dummy/tests/page-object'], function (exports, _dummyTestsPageObject) {\n  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n  exports.jquery = jquery;\n  exports['default'] = component;\n\n  // A helper to leverage jQuery for page component queries\n\n  function jquery(callback) {\n    var errorIfMissing = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n    return {\n      isDescriptor: true,\n\n      get: function get() {\n        var $el = (0, _dummyTestsPageObject.findElement)(this);\n\n        if (errorIfMissing && !$el.length) {\n          throw new Error('Element ' + this.scope + ' not found.');\n        }\n\n        return callback($el);\n      }\n    };\n  }\n\n  function component() {\n    var scope = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n    var descriptor = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    // If a descriptor is passed as the first arg\n    if (scope === Object(scope)) {\n      descriptor = scope;\n      scope = null;\n    }\n\n    return _extends({}, scope ? { scope: scope, itemScope: scope } : {}, { // inject the scope only if it was provided\n\n      $: jquery(function ($el) {\n        return $el;\n      }),\n      blur: jquery(function ($el) {\n        return $el.blur();\n      }),\n      checked: jquery(function ($el) {\n        return $el.is(':checked');\n      }),\n      click: (0, _dummyTestsPageObject.clickable)(),\n      contains: jquery(function ($el) {\n        return function (selector) {\n          return $el.find(selector).length > 0;\n        };\n      }, false),\n      disabled: jquery(function ($el) {\n        return $el.is('[disabled]');\n      }),\n      exists: jquery(function ($el) {\n        return $el.length > 0;\n      }, false), // false: don't spit an error if element isn't found\n      fill: (0, _dummyTestsPageObject.fillable)(),\n      focus: jquery(function ($el) {\n        return $el.focus();\n      }),\n      index: jquery(function ($el) {\n        return $el.index();\n      }),\n      hasClass: jquery(function ($el) {\n        return function (className) {\n          return $el.hasClass(className);\n        };\n      }),\n      isVisible: (0, _dummyTestsPageObject.isVisible)(),\n      text: (0, _dummyTestsPageObject.text)(),\n      value: (0, _dummyTestsPageObject.value)()\n\n    }, descriptor);\n  }\n});","define('dummy/tests/helpers/page-object/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/page-object/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/page-object/component.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember-runloop', 'dummy/app', 'dummy/config/environment'], function (exports, _emberRunloop, _dummyApp, _dummyConfigEnvironment) {\n  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _extends({}, _dummyConfigEnvironment['default'].APP, attrs);\n\n    (0, _emberRunloop['default'])(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/components/emoji-picker-test', ['exports', 'ember-qunit', 'ember-cli-page-object', 'dummy/tests/pages/components/emoji-picker', 'ember-cli-chai/qunit', 'ember-emojione/emoji-defs', 'sinon', 'ember-test-helpers/wait'], function (exports, _emberQunit, _emberCliPageObject, _dummyTestsPagesComponentsEmojiPicker, _emberCliChaiQunit, _emberEmojioneEmojiDefs, _sinon, _emberTestHelpersWait) {\n\n  var component = (0, _emberCliPageObject.create)(_dummyTestsPagesComponentsEmojiPicker['default']);\n  var m = undefined;\n\n  (0, _emberQunit.moduleForComponent)('emoji-picker', 'Integration | Component | emoji picker', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      component.setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      component.removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', (0, _emberCliChaiQunit.withChai)(function (expect) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set(\"dummyAction\", function () {});\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7a8Sx+fr',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"dummyAction\"]]],null]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    m = \"Should exist after rendering.\";\n    expect(component.exists, m)['true'];\n\n    m = \"Should have 1369 emoji\";\n    expect(component.emoji().count, m).equal(1369);\n\n    m = \"Should have 8 categories\";\n    expect(component.categories().count, m).equal(8);\n\n    m = \"Category 0 title should be 'Smileys & People'\";\n    expect(component.categories(0).title.text, m).equal('Smileys & People');\n\n    m = \"Category 0 should contain 225 emoji\";\n    expect(component.categories(0).emoji().count, m).equal(225);\n\n    m = \"Category 1 title should be 'Animals & Nature'\";\n    expect(component.categories(1).title.text, m).equal('Animals & Nature');\n\n    m = \"Category 1 should contain 225 emoji\";\n    expect(component.categories(1).emoji().count, m).equal(160);\n\n    m = \"Category 2 title should be 'Food & Drink'\";\n    expect(component.categories(2).title.text, m).equal('Food & Drink');\n\n    m = \"Category 2 should contain 225 emoji\";\n    expect(component.categories(2).emoji().count, m).equal(85);\n\n    m = \"Category 3 title should be 'Activity'\";\n    expect(component.categories(3).title.text, m).equal('Activity');\n\n    m = \"Category 3 should contain 225 emoji\";\n    expect(component.categories(3).emoji().count, m).equal(69);\n\n    m = \"Category 4 title should be 'Travel & Places'\";\n    expect(component.categories(4).title.text, m).equal('Travel & Places');\n\n    m = \"Category 4 should contain 225 emoji\";\n    expect(component.categories(4).emoji().count, m).equal(118);\n\n    m = \"Category 5 title should be 'Objects'\";\n    expect(component.categories(5).title.text, m).equal('Objects');\n\n    m = \"Category 5 should contain 225 emoji\";\n    expect(component.categories(5).emoji().count, m).equal(180);\n\n    m = \"Category 6 title should be 'Symbols'\";\n    expect(component.categories(6).title.text, m).equal('Symbols');\n\n    m = \"Category 6 should contain 225 emoji\";\n    expect(component.categories(6).emoji().count, m).equal(275);\n\n    m = \"Category 7 title should be 'Flags'\";\n    expect(component.categories(7).title.text, m).equal('Flags');\n\n    m = \"Category 7 should contain 225 emoji\";\n    expect(component.categories(7).emoji().count, m).equal(257);\n  }));\n\n  (0, _emberQunit.test)('it should trigger an action when emoji is clicked', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var actionSpy = _sinon['default'].spy();\n    this.setProperties({ actionSpy: actionSpy });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'Nak4qoYH',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"actionSpy\"]]],null]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    component.emoji(0).click();\n\n    m = \"Action should've been called once\";\n    expect(actionSpy.calledOnce, m).ok;\n\n    m = \"Action should've been called with the grinning emoji definition\";\n    expect(actionSpy.calledWith(_emberEmojioneEmojiDefs['default'].grinning), m).ok;\n  }));\n\n  (0, _emberQunit.test)('it should trigger the close action when emoji is clicked and shouldCloseOnSelect is true', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var selectSpy = _sinon['default'].spy();\n    var closeSpy = _sinon['default'].spy();\n    this.setProperties({ selectSpy: selectSpy, closeSpy: closeSpy, shouldCloseOnSelect: true });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'K+wf8mFF',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\",\"closeAction\",\"shouldCloseOnSelect\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"selectSpy\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"closeSpy\"]]],null],[\"get\",[\"shouldCloseOnSelect\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    component.emoji(0).click();\n\n    m = \"Select action should've been called once\";\n    expect(selectSpy.calledOnce, m).ok;\n\n    m = \"Select action should've been called with the grinning emoji definition\";\n    expect(selectSpy.calledWith(_emberEmojioneEmojiDefs['default'].grinning), m).ok;\n\n    m = \"Close action should've been called once\";\n    expect(closeSpy.calledOnce, m).ok;\n\n    this.set('shouldCloseOnSelect', false);\n\n    component.emoji(0).click();\n\n    m = \"After second click, elect action should've been called twice\";\n    expect(selectSpy.calledTwice, m).ok;\n\n    m = \"After second click, close action should've been called once\";\n    expect(closeSpy.calledOnce, m).ok;\n  }));\n\n  (0, _emberQunit.test)('it should switch tones', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    this.set(\"dummyAction\", function () {});\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7a8Sx+fr',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"dummyAction\"]]],null]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    m = \"Initially should contain toneless emoji\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m)['true'];\n\n    m = \"Initially should not contain toned emoji\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n\n    component.tones(1).click();\n\n    m = \"Should contain tone 1 emoji after click on tone 1\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m)['true'];\n\n    m = \"Should not contain emoji of other tones after click on tone 1\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m + ' (trying toneless)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n\n    component.tones(2).click();\n\n    m = \"Should contain tone 1 emoji after click on tone 2\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m)['true'];\n\n    m = \"Should not contain emoji of other tones after click on tone 2\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m + ' (trying toneless)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n\n    component.tones(3).click();\n\n    m = \"Should contain tone 1 emoji after click on tone 3\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m)['true'];\n\n    m = \"Should not contain emoji of other tones after click on tone 3\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m + ' (trying toneless)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n\n    component.tones(4).click();\n\n    m = \"Should contain tone 1 emoji after click on tone 4\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m)['true'];\n\n    m = \"Should not contain emoji of other tones after click on tone 4\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m + ' (trying toneless)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n\n    component.tones(5).click();\n\n    m = \"Should contain tone 1 emoji after click on tone 5\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m)['true'];\n\n    m = \"Should not contain emoji of other tones after click on tone 5\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m + ' (trying toneless)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n\n    component.tones(0).click();\n\n    m = \"Should contain toneless emoji after clicking on tone 0\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v:\"]'), m)['true'];\n\n    m = \"Should not contain toned emoji after clicking on tone 0\";\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone1:\"]'), m + ' (trying tone 1)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone2:\"]'), m + ' (trying tone 2)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone3:\"]'), m + ' (trying tone 3)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone4:\"]'), m + ' (trying tone 4)')['false'];\n    expect(component.contains('.eeo-emojiPicker-category-emoji-emojo[title^=\":v_tone5:\"]'), m + ' (trying tone 5)')['false'];\n  }));\n\n  (0, _emberQunit.test)('it should filter emoji', (0, _emberCliChaiQunit.withChai)(function callee$0$0(expect) {\n    var actionSpy;\n    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          actionSpy = _sinon['default'].spy();\n\n          this.setProperties({ actionSpy: actionSpy });\n\n          this.render(Ember.HTMLBars.template({\n            'id': 'Nak4qoYH',\n            'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"actionSpy\"]]],null]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n            'meta': {}\n          }));\n\n          m = \"Initially should contain 1369 emoji\";\n          expect(component.emoji().filterBy('isVisible')).length(1369);\n\n          component.filterInput.fill(\"fo\");\n          context$1$0.next = 8;\n          return regeneratorRuntime.awrap((0, _emberTestHelpersWait['default'])());\n\n        case 8:\n\n          m = \"Should contain 93 emoji after filling 'fo' into search field\";\n          expect(component.emoji().filterBy('isVisible')).length(93);\n\n        case 10:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  }));\n\n  (0, _emberQunit.test)('it should trigger an action when tone is changed', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var toneActionSpy = _sinon['default'].spy();\n    this.setProperties({ toneActionSpy: toneActionSpy, dummyAction: function dummyAction() {} });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'U1tLBt3Y',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"emoji-picker\"],null,[[\"selectAction\",\"toneSelectAction\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"dummyAction\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"toneActionSpy\"]]],null]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    component.tones(3).click();\n\n    m = \"Action should've been called once\";\n    expect(toneActionSpy.calledOnce, m).ok;\n\n    m = \"Action should've been called with '3'\";\n    expect(toneActionSpy.calledWith('3'), m).ok;\n\n    component.tones(3).click();\n\n    m = \"Action should not be called again if skin tone isn't changed.\";\n    expect(toneActionSpy.calledOnce, m).ok;\n  }));\n});","define('dummy/tests/integration/components/emoji-picker-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/emoji-picker-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/emoji-picker-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/integration/components/emoji-picker-wrapper-test', ['exports', 'ember-qunit', 'ember-cli-page-object', 'dummy/tests/pages/components/emoji-picker-wrapper', 'ember-cli-chai/qunit', 'sinon', 'ember-test-helpers/wait'], function (exports, _emberQunit, _emberCliPageObject, _dummyTestsPagesComponentsEmojiPickerWrapper, _emberCliChaiQunit, _sinon, _emberTestHelpersWait) {\n  // import {next} from 'ember-runloop';\n\n  var component = (0, _emberCliPageObject.create)(_dummyTestsPagesComponentsEmojiPickerWrapper['default']);\n  var m = undefined;\n\n  (0, _emberQunit.moduleForComponent)('emoji-picker-wrapper', 'Integration | Component | emoji picker wrapper', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      component.setContext(this);\n    },\n\n    afterEach: function afterEach() {\n      component.removeContext();\n    }\n  });\n\n  (0, _emberQunit.test)('it calls action with new text value', (0, _emberCliChaiQunit.withChai)(function callee$0$0(expect) {\n    var actionSpy, input;\n    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          actionSpy = _sinon['default'].spy((function (text) {\n            this.setProperties({ text: text });\n          }).bind(this));\n\n          this.setProperties({\n            actionSpy: actionSpy,\n            text: 'lol'\n          });\n\n          // Template block usage:\n          this.render(Ember.HTMLBars.template({\n            'id': 'YlS/J4mg',\n            'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"emoji-picker-wrapper\"],null,[[\"text\",\"inputSelector\",\"emojiInsertedAction\"],[[\"get\",[\"text\"]],\".input\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"actionSpy\"]]],null]]],0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\",\"class\"],[[\"get\",[\"text\"]],\"input\"]]],false],[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"component\"],[[\"get\",[\"emojiPicker\"]]],null],false],[\"text\",\"\\\\n\"]],\"locals\":[\"emojiPicker\"]}],\"hasPartials\":false}',\n            'meta': {}\n          }));\n\n          component.emojiPicker.emoji(0).click();\n\n          m = \"emojiInsertedAction should've been called once\";\n          expect(actionSpy.calledOnce, m).ok;\n\n          m = \"emojiInsertedAction should've been called with the updated text\";\n          expect(actionSpy.args[0][0], m).equal('lol:grinning:');\n\n          context$1$0.next = 10;\n          return regeneratorRuntime.awrap((0, _emberTestHelpersWait['default'])());\n\n        case 10:\n          input = component.$.find('.input');\n\n          m = \"input caret position should be at the end\";\n          expect(input.prop('selectionStart'), m + ' (selectionStart)').equal(13);\n          expect(input.prop('selectionEnd'), m + ' (selectionEnd)').equal(13);\n\n        case 14:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  }));\n\n  (0, _emberQunit.test)('it inserts emoji at selection', (0, _emberCliChaiQunit.withChai)(function callee$0$0(expect) {\n    var actionSpy, input;\n    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          actionSpy = _sinon['default'].spy((function (text) {\n            this.setProperties({ text: text });\n          }).bind(this));\n\n          this.setProperties({\n            actionSpy: actionSpy,\n            text: 'lol'\n          });\n\n          // Template block usage:\n          this.render(Ember.HTMLBars.template({\n            'id': 'YlS/J4mg',\n            'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"emoji-picker-wrapper\"],null,[[\"text\",\"inputSelector\",\"emojiInsertedAction\"],[[\"get\",[\"text\"]],\".input\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"actionSpy\"]]],null]]],0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\",\"class\"],[[\"get\",[\"text\"]],\"input\"]]],false],[\"text\",\"\\\\n      \"],[\"append\",[\"helper\",[\"component\"],[[\"get\",[\"emojiPicker\"]]],null],false],[\"text\",\"\\\\n\"]],\"locals\":[\"emojiPicker\"]}],\"hasPartials\":false}',\n            'meta': {}\n          }));\n\n          input = component.$.find('.input');\n\n          input.prop('selectionStart', 1);\n          input.prop('selectionEnd', 2);\n\n          component.emojiPicker.emoji(0).click();\n\n          context$1$0.next = 9;\n          return regeneratorRuntime.awrap((0, _emberTestHelpersWait['default'])());\n\n        case 9:\n\n          m = \"emojiInsertedAction should've been called once\";\n          expect(actionSpy.calledOnce, m).ok;\n\n          m = \"emojiInsertedAction should've been called with the updated text\";\n          expect(actionSpy.args[0][0], m).equal('l:grinning:l');\n\n          // m = \"input should have focus\";\n          // expect(input.is(':focus'), m).true;\n\n          m = \"input caret position should be at 12\";\n          expect(input.prop('selectionStart'), m + ' (selectionStart)').equal(11);\n          expect(input.prop('selectionEnd'), m + ' (selectionEnd)').equal(11);\n\n        case 16:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  }));\n\n  // test('it should not set focus if requested not to', withChai(async function(expect) {\n  //   const actionSpy = sinon.spy(function (text) {\n  //     this.setProperties({text});\n  //   }.bind(this));\n  //\n  //   this.setProperties({\n  //     actionSpy,\n  //     text: 'lol'\n  //   });\n  //\n  //   // Template block usage:\n  //   this.render(hbs`\n  //     {{#emoji-picker-wrapper\n  //       text                  = text\n  //       inputSelector         = \".input\"\n  //       shouldSetFocusToInput = false\n  //       emojiInsertedAction   = (action actionSpy)\n  //       as |emojiPicker|\n  //     }}\n  //       {{input value=text class=\"input\"}}\n  //       {{component emojiPicker}}\n  //     {{/emoji-picker-wrapper}}\n  //   `);\n  //\n  //   const input = component.$.find('.input');\n  //\n  //   input.prop('selectionStart', 2);\n  //   input.prop('selectionEnd',   2);\n  //   component.emojiPicker.emoji(0).click();\n  //\n  //   await wait();\n  //\n  //   m = \"input should not have focus\";\n  //   expect(input.is(':focus'), m).false;\n  // }));\n\n  (0, _emberQunit.test)('it should toggle emoji picker visibility with button', (0, _emberCliChaiQunit.withChai)(function callee$0$0(expect) {\n    return regeneratorRuntime.async(function callee$0$0$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          this.render(Ember.HTMLBars.template({\n            'id': 'y1joWHy6',\n            'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"emoji-picker-wrapper\"],null,[[\"inputSelector\"],[\".input\"]],1],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"my-button\"],[\"flush-element\"],[\"text\",\"key\"],[\"close-element\"],[\"text\",\"\\\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"      \"],[\"append\",[\"helper\",[\"input\"],null,[[\"value\",\"class\"],[[\"get\",[\"text\"]],\"input\"]]],false],[\"text\",\"\\\\n\"],[\"block\",[\"component\"],[[\"get\",[\"emojiPickerToggler\"]]],null,0],[\"text\",\"      \"],[\"append\",[\"helper\",[\"component\"],[[\"get\",[\"emojiPicker\"]]],null],false],[\"text\",\"\\\\n\"]],\"locals\":[\"emojiPicker\",\"emojiPickerToggler\"]}],\"hasPartials\":false}',\n            'meta': {}\n          }));\n\n          m = \"Emoji picker should initially be invisible\";\n          expect(component.emojiPicker.isVisible, m)['false'];\n\n          component.toggler.click();\n          context$1$0.next = 6;\n          return regeneratorRuntime.awrap((0, _emberTestHelpersWait['default'])());\n\n        case 6:\n\n          m = \"Emoji picker should initially be visible after first click\";\n          expect(component.emojiPicker.isVisible, m)['true'];\n\n          component.toggler.click();\n          context$1$0.next = 11;\n          return regeneratorRuntime.awrap((0, _emberTestHelpersWait['default'])());\n\n        case 11:\n\n          m = \"Emoji picker should be invisible again after second click\";\n          expect(component.emojiPicker.isVisible, m)['false'];\n\n        case 13:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  }));\n\n  // test('it should position the typing assistance component correctly', withChai(async function(expect) {\n  //   this.set('text', 'foo');\n  //\n  //   this.render(hbs`\n  //     {{#emoji-picker-wrapper\n  //       text          = text\n  //       inputSelector = \".input\"\n  //       as |emojiPicker emojiPickerToggler emojiAssist|\n  //     }}\n  //       {{input value=text class=\"input\"}}\n  //       {{component emojiAssist}}\n  //     {{/emoji-picker-wrapper}}\n  //   `);\n  //\n  //   m = \"Emoji assist should initially be invisible\";\n  //   expect(component.emojiAssist.isVisible, m).false;\n  //\n  //   const $input = component.$.find('.input');\n  //   $input.val('Foo :ba Baz');\n  //   $input.prop('selectionStart', 7);\n  //   $input.prop('selectionEnd',   7);\n  //\n  //   $input.change();\n  //\n  //   await wait();\n  //\n  //   m = \"Emoji assist should become visible\";\n  //   expect(component.emojiAssist.isVisible, m).true;\n  //\n  //   m = \"Emoji assist should have top style\";\n  //   expect(component.emojiAssist.$.css('top'), m).equal('27px');\n  //\n  //   m = \"Emoji assist should have left style\";\n  //   expect(component.emojiAssist.$.css('left'), m).equal('27px');\n  // }));\n});","define('dummy/tests/integration/components/emoji-picker-wrapper-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/emoji-picker-wrapper-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/emoji-picker-wrapper-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/page-object', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {\n  exports.attribute = _emberCliPageObject.attribute;\n  exports.clickOnText = _emberCliPageObject.clickOnText;\n  exports.clickable = _emberCliPageObject.clickable;\n  exports.collection = _emberCliPageObject.collection;\n  exports.contains = _emberCliPageObject.contains;\n  exports.count = _emberCliPageObject.count;\n  exports.create = _emberCliPageObject.create;\n  exports.fillable = _emberCliPageObject.fillable;\n  exports.selectable = _emberCliPageObject.fillable;\n  exports.hasClass = _emberCliPageObject.hasClass;\n  exports.is = _emberCliPageObject.is;\n  exports.isHidden = _emberCliPageObject.isHidden;\n  exports.isVisible = _emberCliPageObject.isVisible;\n  exports.notHasClass = _emberCliPageObject.notHasClass;\n  exports.property = _emberCliPageObject.property;\n  exports.text = _emberCliPageObject.text;\n  exports.triggerable = _emberCliPageObject.triggerable;\n  exports.value = _emberCliPageObject.value;\n  exports.visitable = _emberCliPageObject.visitable;\n  exports['default'] = {\n    attribute: _emberCliPageObject.attribute,\n    clickOnText: _emberCliPageObject.clickOnText,\n    clickable: _emberCliPageObject.clickable,\n    collection: _emberCliPageObject.collection,\n    contains: _emberCliPageObject.contains,\n    count: _emberCliPageObject.count,\n    create: _emberCliPageObject.create,\n    fillable: _emberCliPageObject.fillable,\n    hasClass: _emberCliPageObject.hasClass,\n    is: _emberCliPageObject.is,\n    isHidden: _emberCliPageObject.isHidden,\n    isVisible: _emberCliPageObject.isVisible,\n    notHasClass: _emberCliPageObject.notHasClass,\n    property: _emberCliPageObject.property,\n    selectable: _emberCliPageObject.fillable,\n    text: _emberCliPageObject.text,\n    triggerable: _emberCliPageObject.triggerable,\n    value: _emberCliPageObject.value,\n    visitable: _emberCliPageObject.visitable\n  };\n  Object.defineProperty(exports, 'buildSelector', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.buildSelector;\n    }\n  });\n  Object.defineProperty(exports, 'findElementWithAssert', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElementWithAssert;\n    }\n  });\n  Object.defineProperty(exports, 'findElement', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.findElement;\n    }\n  });\n  Object.defineProperty(exports, 'getContext', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.getContext;\n    }\n  });\n  Object.defineProperty(exports, 'fullScope', {\n    enumerable: true,\n    get: function get() {\n      return _emberCliPageObject.fullScope;\n    }\n  });\n});","define('dummy/tests/pages/components/emoji-picker-wrapper', ['exports', 'dummy/tests/helpers/page-object/component', 'dummy/tests/pages/components/emoji-typing-assistance', 'dummy/tests/pages/components/emoji-picker'], function (exports, _dummyTestsHelpersPageObjectComponent, _dummyTestsPagesComponentsEmojiTypingAssistance, _dummyTestsPagesComponentsEmojiPicker) {\n  exports['default'] = (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiPickerWrapper', {\n    emojiAssist: _dummyTestsPagesComponentsEmojiTypingAssistance['default'],\n    emojiPicker: _dummyTestsPagesComponentsEmojiPicker['default'],\n    toggler: (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiPicker-toggler')\n  });\n});\n// import {\n//   collection\n// } from 'ember-cli-page-object';","define('dummy/tests/pages/components/emoji-picker-wrapper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pages/components/emoji-picker-wrapper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/components/emoji-picker-wrapper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/pages/components/emoji-picker', ['exports', 'ember-cli-page-object', 'dummy/tests/helpers/page-object/component'], function (exports, _emberCliPageObject, _dummyTestsHelpersPageObjectComponent) {\n  exports['default'] = (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiPicker', {\n    emoji: (0, _emberCliPageObject.collection)({\n      itemScope: '.eeo-emojiPicker-category-emoji-emojo',\n      item: (0, _dummyTestsHelpersPageObjectComponent['default'])()\n    }),\n\n    categories: (0, _emberCliPageObject.collection)({\n      itemScope: '.eeo-emojiPicker-category',\n      item: (0, _dummyTestsHelpersPageObjectComponent['default'])({\n        title: (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiPicker-category-title'),\n        emoji: (0, _emberCliPageObject.collection)({\n          scope: '.eeo-emojiPicker-category-emoji',\n          itemScope: '.eeo-emojiPicker-category-emoji-emojo',\n          item: (0, _dummyTestsHelpersPageObjectComponent['default'])()\n        })\n      })\n    }),\n\n    tones: (0, _emberCliPageObject.collection)({\n      scope: '.eeo-emojiPicker-tones',\n      itemScope: '.eeo-emojiPicker-tone',\n      item: (0, _dummyTestsHelpersPageObjectComponent['default'])()\n    }),\n\n    filterInput: (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiPicker-filter-input')\n  });\n});","define('dummy/tests/pages/components/emoji-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pages/components/emoji-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/components/emoji-picker.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/pages/components/emoji-typing-assistance', ['exports', 'dummy/tests/helpers/page-object/component'], function (exports, _dummyTestsHelpersPageObjectComponent) {\n  exports['default'] = (0, _dummyTestsHelpersPageObjectComponent['default'])('.eeo-emojiAssist', {});\n});\n// import {\n//   text\n// } from 'ember-cli-page-object';","define('dummy/tests/pages/components/emoji-typing-assistance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pages/components/emoji-typing-assistance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pages/components/emoji-typing-assistance.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/helpers/inject-emoji-test', ['exports', 'dummy/helpers/inject-emoji', 'qunit', 'ember-cli-chai/qunit', 'ember-string', 'ember-string-ishtmlsafe-polyfill', 'ember-get-config'], function (exports, _dummyHelpersInjectEmoji, _qunit, _emberCliChaiQunit, _emberString, _emberStringIshtmlsafePolyfill, _emberGetConfig) {\n\n  (0, _qunit.module)('Unit | Helper | inject emoji', {\n    beforeEach: function beforeEach() {\n      this.subject = _dummyHelpersInjectEmoji['default'].create();\n    },\n\n    afterEach: function afterEach() {\n      delete _emberGetConfig['default']['ember-emojione'];\n    }\n  });\n\n  var m = undefined;\n\n  (0, _qunit.test)('it should inject emoji into a simple string', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var inputStr = \"<p>Foo :scream_cat: 🤓 <span>Bar :)</span></p>\";\n    var expected = \"<p>Foo <span class=\\\"emojione emojione-1f640\\\" title=\\\":scream_cat:\\\">🙀</span> <span class=\\\"emojione emojione-1f913\\\" title=\\\":nerd_face:\\\">🤓</span> <span>Bar :)</span></p>\";\n    var result = this.subject.compute([inputStr]);\n\n    m = \"Result should contain emoji\";\n    expect(result, m).equal(expected);\n  }));\n\n  (0, _qunit.test)('it should inject emoji into an html-safe string, returning an html-safe string', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var inputStr = (0, _emberString.htmlSafe)(\"<p>Foo :scream_cat: 🤓 <span>Bar :)</span></p>\");\n    var expected = \"<p>Foo <span class=\\\"emojione emojione-1f640\\\" title=\\\":scream_cat:\\\">🙀</span> <span class=\\\"emojione emojione-1f913\\\" title=\\\":nerd_face:\\\">🤓</span> <span>Bar :)</span></p>\";\n    var result = this.subject.compute([inputStr]);\n\n    m = \"Result should contain emoji\";\n    expect(result.toString(), m).equal(expected);\n\n    m = \"Result should be html-safe\";\n    expect((0, _emberStringIshtmlsafePolyfill['default'])(result), m)['true'];\n  }));\n\n  (0, _qunit.test)('it should respect emojione settings from env', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    _emberGetConfig['default']['ember-emojione'] = {\n      emojione: {\n        imagePathSVG: 'SVG.svg',\n        imageType: 'svg',\n        imageTitleTag: false,\n        unicodeAlt: false,\n        ascii: true\n      }\n    };\n\n    var inputStr = \"<p>Foo :scream_cat: 🤓 <span>Bar :)</span></p>\";\n    var expected = \"<p>Foo <object class=\\\"emojione\\\" data=\\\"SVG.svg1f640.svg?v=2.2.7\\\" type=\\\"image/svg+xml\\\" standby=\\\":scream_cat:\\\">:scream_cat:</object> <img class=\\\"emojione\\\" alt=\\\":nerd_face:\\\"  src=\\\"SVG.svg1f913.svg?v=2.2.7\\\"/> <span>Bar :)</span></p>\";\n    var result = this.subject.compute([inputStr], { emojione: { sprites: false } });\n\n    expect(result).equal(expected);\n  }));\n\n  (0, _qunit.test)('it should respect emojione settings from named argument `emojione`', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var options = {\n      emojione: {\n        imagePathSVG: 'SVGLOL',\n        imageType: 'svg',\n        imageTitleTag: false,\n        sprites: false,\n        unicodeAlt: false,\n        ascii: true\n      }\n    };\n\n    var inputStr = \"<p>Foo :scream_cat: 🤓 <span>Bar :)</span></p>\";\n    var expected = \"<p>Foo <object class=\\\"emojione\\\" data=\\\"SVGLOL1f640.svg?v=2.2.7\\\" type=\\\"image/svg+xml\\\" standby=\\\":scream_cat:\\\">:scream_cat:</object> <img class=\\\"emojione\\\" alt=\\\":nerd_face:\\\"  src=\\\"SVGLOL1f913.svg?v=2.2.7\\\"/> <span>Bar :)</span></p>\";\n    var result = this.subject.compute([inputStr], options);\n\n    expect(result).equal(expected);\n  }));\n\n  (0, _qunit.test)('use from JS', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var inputStr = \":D\";\n    var options = { emojione: { ascii: true } };\n    var expected = \"<span class=\\\"emojione emojione-1f603\\\"  title=\\\":D\\\">😃</span>\";\n    var result = (0, _dummyHelpersInjectEmoji.injectEmoji)(inputStr, options);\n\n    expect(result).equal(expected);\n  }));\n\n  (0, _qunit.test)('it should parse code blocks', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var inputStr = \"<p>Foo :scream_cat: 🤓 <em>Bar :)</em> <code>some :pig_nose: code</code></p>\\n<pre><code class=\\\"language-js\\\">\\nasdf :crocodile: asdf\\n</code></pre>\";\n    var expected = \"<p>Foo <span class=\\\"emojione emojione-1f640\\\" title=\\\":scream_cat:\\\">🙀</span> <span class=\\\"emojione emojione-1f913\\\" title=\\\":nerd_face:\\\">🤓</span> <em>Bar :)</em> <code>some <span class=\\\"emojione emojione-1f43d\\\" title=\\\":pig_nose:\\\">🐽</span> code</code></p>\\n<pre><code class=\\\"language-js\\\">\\nasdf <span class=\\\"emojione emojione-1f40a\\\" title=\\\":crocodile:\\\">🐊</span> asdf\\n</code></pre>\";\n    var options = { regexToSkip: false };\n    var result = this.subject.compute([inputStr], options);\n\n    expect(result).equal(expected);\n  }));\n\n  (0, _qunit.test)('it should ignore code blocks', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    var inputStr = \"<p>Foo :scream_cat: 🤓 <em>Bar :)</em> <code>some :pig_nose: code</code></p>\\n<pre><code class=\\\"language-js\\\">\\nasdf :crocodile: asdf\\n</code></pre>\";\n    var expected = \"<p>Foo <span class=\\\"emojione emojione-1f640\\\" title=\\\":scream_cat:\\\">🙀</span> <span class=\\\"emojione emojione-1f913\\\" title=\\\":nerd_face:\\\">🤓</span> <em>Bar :)</em> <code>some :pig_nose: code</code></p>\\n<pre><code class=\\\"language-js\\\">\\nasdf :crocodile: asdf\\n</code></pre>\";\n    var result = this.subject.compute([inputStr]);\n\n    expect(result).equal(expected);\n  }));\n\n  (0, _qunit.test)('edge cases', (0, _emberCliChaiQunit.withChai)(function (expect) {\n    m = \"Empty string\";\n    expect(this.subject.compute(['']), m).equal('');\n\n    m = \"`false`\";\n    expect(this.subject.compute([null]), m).equal('');\n\n    m = \"`null`\";\n    expect(this.subject.compute([null]), m).equal('');\n\n    m = \"`undefined` 1\";\n    expect(this.subject.compute([undefined]), m).equal('');\n\n    m = \"`undefined` 2\";\n    expect(this.subject.compute([]), m).equal('');\n\n    m = \"number\";\n    expect(this.subject.compute([2]), m).equal('2');\n  }));\n});\n/*, skip*/","define('dummy/tests/unit/helpers/inject-emoji-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/helpers/inject-emoji-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/inject-emoji-test.js should pass ESLint.\\n');\n  });\n});","define('dummy/tests/unit/services/emoji-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:emoji', 'Unit | Service | emoji', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/emoji-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/emoji-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/emoji-test.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}